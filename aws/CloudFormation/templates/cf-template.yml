AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::LanguageExtensions

Parameters:
    GithubAccessToken:
        Type: String
        Description: "GitHub personal access token"
        NoEcho: true

Mappings:
    Env:
        "443244910989":
            Name: evl

Resources:

    # S3
    # region

    # テストレポートその他を保存するメインのS3バケット
    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub
            - user-bsdxxxx-${Env}-test-automation
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            # SSE-S3で暗号化
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                -   BucketKeyEnabled: true
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            # バージョニング有効化
            VersioningConfiguration:
                Status: Enabled
            # アクセスログを別のバケットに保存する
            LoggingConfiguration:
                DestinationBucketName: !Ref AccessLogS3Bucket
                LogFilePrefix: s3AccessLog/
            LifecycleConfiguration:
                Rules:
                -   Id: delete-test-reports
                    Prefix: test-reports/
                    Status: Enabled
                    Transitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    NoncurrentVersionTransitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    ExpirationInDays: 366
                -   Id: delete-old-condebuild-logs
                    Prefix: logs/CodeBuild/
                    Status: Enabled
                    Transitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    NoncurrentVersionTransitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    ExpirationInDays: 366
                -   Id: delete-old-imagebuilder-logs
                    Prefix: logs/ImageBuilder/
                    Status: Enabled
                    Transitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    NoncurrentVersionTransitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    ExpirationInDays: 366
                -   Id: delete-temp-testcases
                    Prefix: temp-testcases/
                    Status: Enabled
                    ExpirationInDays: 1

    # メインバケットのバケットポリシー
    S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                # 社内からテストレポートへのアクセス許可
                -   Effect: Allow
                    Action: s3:GetObject
                    Resource: !Sub "${S3Bucket.Arn}/test-reports/*/allure-report/*"
                    Principal: "*"
                    Condition:
                        IpAddress:
                            aws:SourceIp:
                            - 192.168.11.1/32

    # メインバケットへのアクセスログを保管するバケット
    AccessLogS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub
            - user-bsdxxxx-${Env}-access-log
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            # SSE-S3で暗号化
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                -   BucketKeyEnabled: true
                    ServerSideEncryptionByDefault:
                        SSEAlgorithm: AES256
            # バージョニング有効化
            VersioningConfiguration:
                Status: Enabled
            # ログ配置を許可
            #AccessControl: LogDeliveryWrite
            LifecycleConfiguration:
                Rules:
                - # 3ヶ月後にGlacierに移動、1年後に削除
                    Id: delete-access-log
                    Prefix: s3AccessLog/
                    Status: Enabled
                    Transitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    NoncurrentVersionTransitions:
                    -   StorageClass: GLACIER
                        TransitionInDays: 90
                    ExpirationInDays: 366

    # アクセスログの保存を許可するバケットポリシー
    AccessLogS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref AccessLogS3Bucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                -   Effect: Allow
                    Principal:
                        Service: logging.s3.amazonaws.com
                    Action: s3:PutObject
                    Resource: !Sub "${AccessLogS3Bucket.Arn}/s3AccessLog/*"
                    Condition:
                        ArnLike:
                            aws:SourceArn: !GetAtt S3Bucket.Arn
                        StringEquals:
                            aws:SourceAccount: !Ref AWS::AccountId

    # endregion

    # ImageBuilder
    # region

    # テストを実行するDockerコンテナイメージを保存するリポジトリ
    ECRRepository:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: !Sub
            - user-bsdxxxx-${Env}-ecr-repository
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            # 不要なイメージを保存しないよう1つのみ保存する
            LifecyclePolicy:
                LifecyclePolicyText: !Rain::Embed ./cf-packages/LifecyclePolicyText.json
            # CodeBuildやFargateから使用できるよう許可
            RepositoryPolicyText: !Rain::Embed ./cf-packages/RepositoryPolicyText.json

    # コンテナの初期環境構築を行うコンポーネント
    InitComponent:
        Type: AWS::ImageBuilder::Component
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-init-component
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Platform: Linux
            SupportedOsVersions: [ "Amazon Linux 2" ]
            Version: 1.0.0
            Uri: !Rain::S3 ./cf-packages/InitComponent.yml

    #    # Chromeのインストール
    #    ChromeComponent:
    #        Type: AWS::ImageBuilder::Component
    #        Properties:
    #            Name: !Sub
    #            - user-bsdxxxx-${Env}-chrome-component
    #            - { Env: !FindInMap [Env, !Ref AWS::AccountId, Name] }
    #            Platform: Linux
    #            SupportedOsVersions: ["Amazon Linux 2"]
    #            Version: 1.0.0
    #            Uri: !Rain::S3 ./cf-packages/ChromeComponent.yml
    #
    #    # Firefoxのインストール
    #    FirefoxComponent:
    #        Type: AWS::ImageBuilder::Component
    #        Properties:
    #            Name: !Sub
    #            - user-bsdxxxx-${Env}-firefox-component
    #            - { Env: !FindInMap [Env, !Ref AWS::AccountId, Name] }
    #            Platform: Linux
    #            SupportedOsVersions: ["Amazon Linux 2"]
    #            Version: 1.0.0
    #            Uri: !Rain::S3 ./cf-packages/FirefoxComponent.yml
    #
    #    # Edgeのインストール
    #    EdgeComponent:
    #        Type: AWS::ImageBuilder::Component
    #        Properties:
    #            Name: !Sub
    #            - user-bsdxxxx-${Env}-edge-component
    #            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
    #            Platform: Linux
    #            SupportedOsVersions: [ "Amazon Linux 2" ]
    #            Version: 1.0.0
    #            Uri: !Rain::S3 ./cf-packages/EdgeComponent.yml

    # コンテナレシピ
    ContainerRecipe:
        Type: AWS::ImageBuilder::ContainerRecipe
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-container-recipe
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Version: 1.0.0
            ParentImage: !Sub arn:aws:imagebuilder:${AWS::Region}:aws:image/amazon-linux-x86-2/2023.9.23
            ContainerType: DOCKER
            Components:
            -   ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/${InitComponent.Name}/x.x.x
            #            - ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/${ChromeComponent.Name}/x.x.x
            #            - ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/${FirefoxComponent.Name}/x.x.x
            #            - ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/${EdgeComponent.Name}/x.x.x
            DockerfileTemplateData: |
                FROM {{{ imagebuilder:parentImage }}}
                {{{ imagebuilder:environments }}}
                {{{ imagebuilder:components }}}
            InstanceConfiguration:
                BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        DeleteOnTermination: true
                        VolumeSize: 30
            TargetRepository:
                RepositoryName: !Ref ECRRepository
                Service: ECR

    # コンテナイメージをビルドするインスタンスのロール
    ImageBuilderInstanceProfileRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub
            - user-bsdxxxx-${Env}-imagebuilder-instance-profile-role
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            ManagedPolicyArns:
            - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            Policies:
            -   PolicyName: !Sub
                - user-bsdxxxx-${Env}-imagebuilder-instance-profile-policy
                - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
                PolicyDocument:
                  !Rain::Include ./cf-packages/ImageBuilderInstanceProfilePolicy.yml
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement: { Effect: Allow, Action: sts:AssumeRole, Principal: { Service: ec2.amazonaws.com } }
            #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/bgl-Boundaries-SE

    # コンテナイメージをビルドするインスタンスのインスタンスプロファイル
    ImageBuilderInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: !Sub
            - user-bsdxxxx-${Env}-imagebuilder-instance-profile
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Roles:
            - !Ref ImageBuilderInstanceProfileRole

    # コンテナイメージをビルドするインスタンス設定
    InfrastructureConfiguration:
        Type: AWS::ImageBuilder::InfrastructureConfiguration
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-infrastructure-configuration
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            InstanceProfileName: !Ref ImageBuilderInstanceProfile
            InstanceTypes:
            - t2.micro
            Logging:
                S3Logs:
                    S3BucketName: !Ref S3Bucket
                    S3KeyPrefix: logs/imageBuilder
    #            SubnetId: !FindInMap [Env, !Ref AWS::AccountId, InfrastructureConfigurationSubnetId]
    #            SecurityGroupIds:
    #            - !FindInMap [Env, !Ref AWS::AccountId, InfrastructureConfigurationSecurityGroupId]

    # コンテナイメージの配付設定
    DistributionConfiguration:
        Type: AWS::ImageBuilder::DistributionConfiguration
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-distribution-configuration
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Distributions:
            -   Region: !Ref AWS::Region
                ContainerDistributionConfiguration:
                    # タグを付加してECRリポジトリに保存
                    TargetRepository:
                        RepositoryName: !Ref ECRRepository
                        Service: ECR
                    ContainerTags:
                    - TestAutomationContainer

    # イメージパイプライン
    ImagePipeline:
        Type: AWS::ImageBuilder::ImagePipeline
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-image-pipeline
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            ContainerRecipeArn: !Ref ContainerRecipe
            InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
            DistributionConfigurationArn: !Ref DistributionConfiguration

    # endregion

    # CodeBuild
    # region
    # CloudWatchLogsを暗号化するキー
    LogEncryptKey:
        Type: AWS::KMS::Key
        Properties:
            EnableKeyRotation: true
            KeySpec: SYMMETRIC_DEFAULT
            KeyPolicy:
              !Rain::Include ./cf-packages/KeyPolicy.yml

    # キーのエイリアス
    LogEncryptKeyAlias:
        Type: AWS::KMS::Alias
        Properties:
            AliasName: !Sub
            - alias/user-bsdxxxx-${Env}-log-encrypt-key
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            TargetKeyId: !Ref LogEncryptKey

    # CodeBuildの実行ログを出力するロググループ
    CodeBuildLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            KmsKeyId: !GetAtt LogEncryptKey.Arn
            LogGroupName: !Sub
            - user-bsdxxxx-${Env}-codebuild-log-group
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            RetentionInDays: 90

    # テストを実行するCodeBuildProjectのサービスロール
    CodeBuildServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub
            - user-bsdxxxx-${Env}-codebuild-service-role
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Policies:
            -   PolicyName: !Sub
                - user-bsdxxxx-${Env}-imagebuilder-codebuild-service-policy
                - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
                PolicyDocument:
                  !Rain::Include ./cf-packages/CodeBuildServicePolicy.yml
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement: { Effect: Allow, Action: sts:AssumeRole, Principal: { Service: codebuild.amazonaws.com } }
            #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/bgl-Boundaries-SE

    # Githubからクローンするための認証情報
    CodeBuildSourceCredential:
        Type: AWS::CodeBuild::SourceCredential
        Properties:
            AuthType: PERSONAL_ACCESS_TOKEN
            ServerType: GITHUB
            Token: !Ref GithubAccessToken

    # テストを実行するCodeBuildプロジェクト
    CodeBuildProject:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-build
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            ServiceRole: !Ref CodeBuildServiceRole
            # Githubからソースを取得する
            Source:
                Type: GITHUB
                Auth:
                    Resource: !Ref CodeBuildSourceCredential
                    Type: OAUTH
                GitCloneDepth: 1
                Location: https://github.com/yx-saku/gradle-selenium.git
            #SourceVersion: main
            SourceVersion: master
            # ImageBuilderでビルドしたコンテナイメージを使用する
            Environment:
                Image: !Sub ${ECRRepository.RepositoryUri}:TestAutomationContainer
                Type: LINUX_CONTAINER
                ImagePullCredentialsType: CODEBUILD
                ComputeType: BUILD_GENERAL1_SMALL
                EnvironmentVariables:
                -   Name: S3_BUCKET
                    Type: PLAINTEXT
                    Value: !Ref S3Bucket
            # S3にテストレポート出力
            Artifacts:
                Type: S3
                Location: !Ref S3Bucket
                OverrideArtifactName: true
                Path: test-reports/
                EncryptionDisabled: true
            # CloudWatchLogsとS3にログ出力
            LogsConfig:
                CloudWatchLogs:
                    GroupName: !Ref CodeBuildLogGroup
                    Status: ENABLED
                S3Logs:
                    EncryptionDisabled: false
                    Location: !Sub ${S3Bucket.Arn}/logs/codebuild
                    Status: ENABLED

    # endregion

    # Fargate
    # region

    ECSCluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            ClusterName: !Sub
            - user-bsdxxxx-${Env}-fargate-cluster
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }

    ECSExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: !Sub
            - user-bsdxxxx-${Env}-ecs-execution-role
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                -   Effect: 'Allow'
                    Principal:
                        Service: 'ecs-tasks.amazonaws.com'
                    Action: 'sts:AssumeRole'
            Policies:
            -   PolicyName: !Sub
                - user-bsdxxxx-${Env}-ecs-execution-policy
                - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                    -   Effect: 'Allow'
                        Action:
                        - 'ecr:GetAuthorizationToken'
                        - 'ecr:BatchCheckLayerAvailability'
                        - 'ecr:GetDownloadUrlForLayer'
                        - 'ecr:BatchGetImage'
                        - 'logs:CreateLogStream'
                        - 'logs:PutLogEvents'
                        Resource: '*'

    FargateLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub
            - user-bsdxxxx-${Env}-fargate-log-group
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            RetentionInDays: 90

    FargateTaskDefinition:
        Type: 'AWS::ECS::TaskDefinition'
        Properties:
            Family: 'ScreenshotCompareTest'
            Cpu: '512'
            Memory: '4096'
            NetworkMode: 'awsvpc'   # 実行モードがFARGATEの場合はawsvpcのみ
            RequiresCompatibilities:
            - 'FARGATE'
            ExecutionRoleArn: !Ref ECSExecutionRole
            ContainerDefinitions:
            -   Name: 'ScreenshotCompareTestExecTestContainer'
                Image: !Sub ${ECRRepository.RepositoryUri}:latest
                LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-region: !Ref AWS::Region
                        awslogs-group: !Ref FargateLogGroup
                        awslogs-stream-prefix: ScreenshotCompareTest
                Command:
                - echo
                - from fargate!!!!

    FargateService:
        Type: 'AWS::ECS::Service'
        Properties:
            ServiceName: !Sub
            - user-bsdxxxx-${Env}-fargate-service
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Cluster: !Ref 'ECSCluster'
            LaunchType: 'FARGATE'
            TaskDefinition: !Ref 'FargateTaskDefinition'
            DesiredCount: 0
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: ENABLED
                    Subnets:
                    - subnet-bf8ec1e4
                    SecurityGroups:
                    - sg-bd73acc6
    # endregion

Outputs:
    S3Bucket:
        Value: !Ref S3Bucket
    ImagePipeline:
        Value: !Ref ImagePipeline