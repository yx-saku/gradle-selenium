AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::LanguageExtensions

Parameters:
    ImageTag:
        Type: String
        Default: latest

Mappings:
    Env:
        "443244910989":
            Name: evl
            InfrastructureConfigurationSubnetId: subnet-bf8ec1e4
            InfrastructureConfigurationSecurityGroupId: sg-bd73acc6

Resources:

    # テストを実行するDockerコンテナイメージを保存するリポジトリ
    ECRRepository:
        Type: AWS::ECR::Repository
        Properties:
            RepositoryName: !Sub
            - user-bsdxxxx-${Env}-ecr-repository
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            # 不要なイメージを保存しないよう1つのみ保存する
            LifecyclePolicy:
                LifecyclePolicyText: !Rain::Embed ./files/LifecyclePolicyText.json
            # CodeBuildやFargateから使用できるよう許可
            RepositoryPolicyText: !Rain::Embed ./files/RepositoryPolicyText.json

    # コンテナレシピ
    ContainerRecipe:
        Type: AWS::ImageBuilder::ContainerRecipe
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-container-recipe
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Version: 1.0.9
            ParentImage: !Sub arn:aws:imagebuilder:${AWS::Region}:aws:image/amazon-linux-x86-2/2023.9.23
            ContainerType: DOCKER
            Components:
            -   ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-corretto-11/x.x.x
            DockerfileTemplateData: !Sub
            - !Rain::Embed ./files/DockerFile
            - { S3BucketName: !ImportValue S3BucketName }
            InstanceConfiguration:
                BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        DeleteOnTermination: true
                        VolumeSize: 30
            TargetRepository:
                RepositoryName: !Ref ECRRepository
                Service: ECR

    # コンテナイメージをビルドするインスタンスのロール
    ImageBuilderInstanceProfileRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub
            - user-bsdxxxx-${Env}-imagebuilder-instance-profile-role
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            ManagedPolicyArns:
            - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # TODO 厳密化する？
            Policies:
            -   PolicyName: !Sub
                - user-bsdxxxx-${Env}-imagebuilder-instance-profile-policy
                - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                    -   Effect: Allow
                        Action: s3:PutObject
                        Resource: !Sub
                        - "${S3BucketArn}/logs/imageBuilder/*"
                        - { S3BucketArn: !ImportValue S3BucketArn }
                    -   Effect: Allow
                        Action: s3:GetObject
                        Resource: !Sub
                        - "${S3BucketArn}/modules/*"
                        - { S3BucketArn: !ImportValue S3BucketArn }
                    -   Effect: Allow
                        Action: s3:ListBucket
                        Resource: !ImportValue S3BucketArn
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    Effect: Allow
                    Principal:
                        Service: ec2.amazonaws.com
                    Action: sts:AssumeRole
            #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/bgl-Boundaries-SE

    # コンテナイメージをビルドするインスタンスのインスタンスプロファイル
    ImageBuilderInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: !Sub
            - user-bsdxxxx-${Env}-imagebuilder-instance-profile
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Roles:
            - !Ref ImageBuilderInstanceProfileRole

    # コンテナイメージをビルドするインスタンス設定
    InfrastructureConfiguration:
        Type: AWS::ImageBuilder::InfrastructureConfiguration
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-infrastructure-configuration
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            InstanceProfileName: !Ref ImageBuilderInstanceProfile
            InstanceTypes:
            - t2.micro
            Logging:
                S3Logs:
                    S3BucketName: !ImportValue S3BucketName
                    S3KeyPrefix: logs/imageBuilder
            SubnetId: !FindInMap [ Env, !Ref AWS::AccountId, InfrastructureConfigurationSubnetId ]
            SecurityGroupIds:
            - !FindInMap [ Env, !Ref AWS::AccountId, InfrastructureConfigurationSecurityGroupId ]

    # コンテナイメージの配付設定
    DistributionConfiguration:
        Type: AWS::ImageBuilder::DistributionConfiguration
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-distribution-configuration
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            Distributions:
            -   Region: !Ref AWS::Region
                ContainerDistributionConfiguration:
                    # タグを付加してECRリポジトリに保存
                    TargetRepository:
                        RepositoryName: !Ref ECRRepository
                        Service: ECR
                    ContainerTags:
                    - !Ref ImageTag

    # イメージパイプライン
    ImagePipeline:
        Type: AWS::ImageBuilder::ImagePipeline
        Properties:
            Name: !Sub
            - user-bsdxxxx-${Env}-image-pipeline
            - { Env: !FindInMap [ Env, !Ref AWS::AccountId, Name ] }
            ContainerRecipeArn: !Ref ContainerRecipe
            InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
            DistributionConfigurationArn: !Ref DistributionConfiguration

Outputs:
    ECRRepositoryUri:
        Value: !GetAtt ECRRepository.RepositoryUri
        Export:
            Name: ECRRepositoryUri
    ImagePipelineArn:
        Value: !Ref ImagePipeline
        Export:
            Name: ImagePipelineArn
    ImageTag:
        Value: !Ref ImageTag
        Export:
            Name: ImageTag