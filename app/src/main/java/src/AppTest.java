/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src;

import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.junit.platform.launcher.listeners.TestExecutionSummary;
import org.junit.platform.launcher.listeners.TestExecutionSummary.Failure;
import org.openqa.selenium.chrome.ChromeOptions;

import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.Selenide;
import com.codeborne.selenide.logevents.SelenideLogger;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.qameta.allure.Allure;
import io.qameta.allure.selenide.AllureSelenide;
import src.utils.ScreenshotUtils;

class AppTest {
    static {
        try {
            Properties properties = new Properties();
            properties.load(AppTest.class.getClassLoader().getResourceAsStream("config.properties"));

            // システムプロパティに設定
            for (String name : properties.stringPropertyNames()) {
                String value = properties.getProperty(name);
                if (System.getProperty(name) == null) { // 設定済みを優先
                    System.setProperty(name, value);
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static Logger LOGGER = Logger.getLogger(AppTest.class.getName());

    public static void main(String[] args) {
        final LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()
                .selectors(selectClass(AppTest.class))
                .build();

        final Launcher launcher = LauncherFactory.create();
        final SummaryGeneratingListener listener = new SummaryGeneratingListener();

        launcher.registerTestExecutionListeners(listener);
        launcher.execute(request);

        TestExecutionSummary summary = listener.getSummary();
        long testFoundCount = summary.getTestsFoundCount();
        List<Failure> failures = summary.getFailures();
        System.out.println("getTestsSucceededCount() - " + summary.getTestsSucceededCount());
        failures.forEach(failure -> System.out.println("failure - " + failure.getException()));
    }

    @BeforeAll
    public static void beforeAll() {
        LOGGER.info("テスト開始：BeforeAll");

        LOGGER.info(System.getProperty("screenshot.reference.dir"));
        LOGGER.info(System.getProperty("allure.results.directory"));

        SelenideLogger.addListener("AllureSelenide", new AllureSelenide());

        var options = new ChromeOptions();
        options.addArguments("--no-sandbox");
        Configuration.browserCapabilities = options;

        var wdm = WebDriverManager.getInstance();
        wdm.setup();

        Properties properties = new Properties();

        // 環境情報を追加
        properties.setProperty("os.name", System.getProperty("os.name"));
        properties.setProperty("os.version", System.getProperty("os.version"));
        properties.setProperty("java.version", System.getProperty("java.version"));
        properties.setProperty("browser", Configuration.browser);

        // allure-resultsディレクトリにenvironment.propertiesファイルを作成
        try {
            var allureResultsPath = Paths.get(System.getProperty("allure.results.directory"));
            Files.createDirectories(allureResultsPath);
            try (OutputStream outputStream = Files.newOutputStream(allureResultsPath.resolve("environment.properties"),
                    StandardOpenOption.CREATE)) {
                properties.store(outputStream, "Environment properties");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    void openUrl() throws IOException {
        LOGGER.info("テスト開始：openUrl");
        Allure.epic("スクショ比較テスト");

        Selenide.open("https://www.google.com");
        // Selenide.open("https://www.kansaigaidai.ac.jp/asp/img/pdf/82/7a79c35f7ce0704dec63be82440c8182.pdf");

        // キャプチャを取得
        ScreenshotUtils.takeScreenshot();
    }
}
