/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.opentest4j.AssertionFailedError;

import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.logevents.SelenideLogger;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.qameta.allure.Allure;
import io.qameta.allure.selenide.AllureSelenide;
import src.steps.AbstractStep;
import src.utils.ScreenshotUtils;

class AppTest {
    private static Map<String, Integer> captureStatusMap = new HashMap<>();

    @BeforeAll
    public static void beforeAll() throws IOException {
        System.getProperties().load(AppTest.class.getClassLoader().getResourceAsStream("config.properties"));

        SelenideLogger.addListener("AllureSelenide", new AllureSelenide());
        switch (Configuration.browser) {
            case "chrome":
                WebDriverManager.chromedriver().setup();
                break;
            case "firefox":
                WebDriverManager.firefoxdriver().setup();
                break;
            case "edge":
                WebDriverManager.edgedriver().setup();
                break;
        }

        Properties properties = new Properties();

        // 環境情報を追加
        properties.setProperty("os.name", System.getProperty("os.name"));
        properties.setProperty("os.version", System.getProperty("os.version"));
        properties.setProperty("java.version", System.getProperty("java.version"));
        properties.setProperty("browser", Configuration.browser);

        // allure-resultsディレクトリにenvironment.propertiesファイルを作成
        try {
            var allureResultsPath = Paths.get(System.getProperty("allure.results.directory"));
            Files.createDirectories(allureResultsPath);
            try (OutputStream outputStream = Files.newOutputStream(allureResultsPath.resolve("environment.properties"),
                    StandardOpenOption.CREATE)) {
                properties.store(outputStream, "Environment properties");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    void openUrl() throws IOException {
        Allure.epic("スクショ比較テスト");

        // 前回取得したキャプチャをreferenceフォルダに移動する
        ScreenshotUtils.moveCapture2reference();

        AbstractStep.getInstance("https://www.google.com").open();
        AbstractStep.getInstance("https://www.kansaigaidai.ac.jp/asp/img/pdf/82/7a79c35f7ce0704dec63be82440c8182.pdf")
                .open();

        // キャプチャを取得
        var captureFileName = ScreenshotUtils.takeScreenshot();

        var captureFileNames = new ArrayList<String>();
        captureFileNames.add(captureFileName);

        //
        var downloadFiles = Files.list(Paths.get(Configuration.downloadsFolder)).toArray(Path[]::new);
        for (var file : downloadFiles) {
            String mimeType = Files.probeContentType(file);
            switch (mimeType) {
                case "application/pdf":
                    var pdfCaptureFileNames = ScreenshotUtils.takePdfScreenshot(file);
                    captureFileNames.addAll(pdfCaptureFileNames);
                    break;
            }
        }

        var failureList = new ArrayList<String>();
        for (var n : captureFileNames) {
            var ret = ScreenshotUtils.compareScreenshot(n);
            if (!ret) {
                var failureCount = Optional.ofNullable(captureStatusMap.get(n)).orElse(0);
                failureCount++;

                if (failureCount >= 2) {
                    failureList.add(n);
                }

                captureStatusMap.put(n, failureCount);
            }
        }

        if (failureList.size() > 0) {
            new AssertionFailedError("差異を検出しました。\nファイル名：\n    " + String.join("\n    ", failureList));
        }
    }
}
